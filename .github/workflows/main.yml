# GitHub Actions docs
# https://help.github.com/en/articles/about-github-actions
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
name: CI
on: [push, pull_request]
jobs:
    static:
        name: Static analyzers / checks (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php-versions: ['7.4']
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v1 # https://github.com/shivammathur/setup-php
              with:
                  php-version: ${{ matrix.php-versions }}

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Configure application for CI run
              run: |
                  cp .env.gh-actions .env
                  cp .env.gh-actions .env.test
                  make generate-jwt-keys
                  chmod 644 ./config/jwt/private.pem

            - name: Validate composer.json and composer.lock
              run: composer validate

            - name: Install Composer dependencies
              run: composer install --no-progress --no-suggest --optimize-autoloader

            - name: Check which versions we're using
              run: |
                  mysql --version
                  php --version
                  php ./bin/console --version
                  php ./vendor/bin/phpunit --version
                  composer --version

            - name: Check that environment is configured correctly
              run: php ./vendor/bin/requirements-checker

            - name: Lint YAML configurations
              run: make lint-yaml

            - name: Run PHP CodeSniffer
              run: make phpcs

            - name: Run The Easiest Way to Use Any Coding Standard
              run: make ecs

            - name: Run Psalm static analysis tool and report statistics to https://shepherd.dev/
              run: make psalm-shepherd

            - name: Run PHPStan static analysis tool
              run: make phpstan

    test:
        name: PHPUnit tests (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_ALLOW_EMPTY_PASSWORD: false
                    MYSQL_ROOT_PASSWORD: symfony
                    MYSQL_DATABASE: symfony
                ports:
                    - 3306/tcp
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            fail-fast: false
            matrix:
                php-versions: ['7.4']
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@v1 # https://github.com/shivammathur/setup-php
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: pdo_mysql, mysql
                  coverage: xdebug

            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache composer dependencies
              uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Configure application for CI run
              run: |
                  cp .env.gh-actions .env
                  cp .env.gh-actions .env.test
                  make generate-jwt-keys
                  chmod 644 ./config/jwt/private.pem

            - name: Install Composer dependencies
              run: composer install --no-progress --no-suggest --optimize-autoloader

            - name: Prepare Code Climate
              run: |
                  curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                  chmod +x ./cc-test-reporter
                  GIT_BRANCH=$GITHUB_REF GIT_COMMIT_SHA=$GITHUB_SHA ./cc-test-reporter before-build
              env:
                  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }} # https://docs.codeclimate.com/docs/finding-your-test-coverage-token

            - name: Run Tests
              run: make run-tests-php
              env:
                  DATABASE_URL: mysql://root:symfony@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony

            - name: Report Code Climate
              run: GIT_BRANCH=$GITHUB_REF GIT_COMMIT_SHA=$GITHUB_SHA ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?
              env:
                  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }} # https://docs.codeclimate.com/docs/finding-your-test-coverage-token
